//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.3
//     from Assets/Input/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Fruit.Behaviour
{
    public partial class @PlayerInputActions : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerInputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""0f96eab2-471d-4be9-8047-36c668a2015f"",
            ""actions"": [
                {
                    ""name"": ""RUN"",
                    ""type"": ""Value"",
                    ""id"": ""52144a51-4c39-470e-86f8-72453b95e737"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""WALK"",
                    ""type"": ""Button"",
                    ""id"": ""f517c209-00d6-400a-a4a4-76541f190b3b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""JUMP"",
                    ""type"": ""Button"",
                    ""id"": ""dfe08212-8172-4bf6-8632-e072b062b661"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""6640e3b6-23d3-4bd2-9dd7-4c54a14bd423"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RUN"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""fffe69dd-54bd-4ad3-aaf7-fab3c81cdd4a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RUN"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""bd19de49-3aa5-4075-b67e-a661ca00f74d"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RUN"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8b152234-d0e2-4ff6-a9f4-79c58c437716"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RUN"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""465a5238-19c7-41b0-94a7-ce35ca4b1c84"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RUN"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""1dec3d50-2c5a-481a-87d2-81015d914383"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WALK"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9173e545-f1cf-4eb0-9ccb-bf71af67e0d3"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JUMP"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Player
            m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
            m_Player_RUN = m_Player.FindAction("RUN", throwIfNotFound: true);
            m_Player_WALK = m_Player.FindAction("WALK", throwIfNotFound: true);
            m_Player_JUMP = m_Player.FindAction("JUMP", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Player
        private readonly InputActionMap m_Player;
        private IPlayerActions m_PlayerActionsCallbackInterface;
        private readonly InputAction m_Player_RUN;
        private readonly InputAction m_Player_WALK;
        private readonly InputAction m_Player_JUMP;
        public struct PlayerActions
        {
            private @PlayerInputActions m_Wrapper;
            public PlayerActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @RUN => m_Wrapper.m_Player_RUN;
            public InputAction @WALK => m_Wrapper.m_Player_WALK;
            public InputAction @JUMP => m_Wrapper.m_Player_JUMP;
            public InputActionMap Get() { return m_Wrapper.m_Player; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
            public void SetCallbacks(IPlayerActions instance)
            {
                if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
                {
                    @RUN.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRUN;
                    @RUN.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRUN;
                    @RUN.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRUN;
                    @WALK.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnWALK;
                    @WALK.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnWALK;
                    @WALK.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnWALK;
                    @JUMP.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJUMP;
                    @JUMP.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJUMP;
                    @JUMP.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJUMP;
                }
                m_Wrapper.m_PlayerActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @RUN.started += instance.OnRUN;
                    @RUN.performed += instance.OnRUN;
                    @RUN.canceled += instance.OnRUN;
                    @WALK.started += instance.OnWALK;
                    @WALK.performed += instance.OnWALK;
                    @WALK.canceled += instance.OnWALK;
                    @JUMP.started += instance.OnJUMP;
                    @JUMP.performed += instance.OnJUMP;
                    @JUMP.canceled += instance.OnJUMP;
                }
            }
        }
        public PlayerActions @Player => new PlayerActions(this);
        public interface IPlayerActions
        {
            void OnRUN(InputAction.CallbackContext context);
            void OnWALK(InputAction.CallbackContext context);
            void OnJUMP(InputAction.CallbackContext context);
        }
    }
}
